/**

\mainpage notitle

\section Introduction
This library(SGG) aims to provide a simple interface for students to include basic graphics, audio and interaction
functionality in their applications written in C and C++.SGG offers an abstraction and simplification layer over
SDL, OpenGL and other core windowing, graphics and audio libraries, providing a clear, simple and hasle - free
programming interface to build from simple interactive applications to 2D computer games and data visualization tools.

\image html example1.jpg

\n

\section Features
SGG provides the following features and functionality:
+Simple library for C / C++ applications with a graphical interface
+ Basic window handling and event processing
+ Full mouse and keyboard input event handling
+ Hardware accelerated support for graphics output(OpenGL 3.3 support or better is required)
+ Font rendering with easy support for multiple TrueType fonts
+ Simple yet powerful support for vector graphics, including gradient fills and transparency
+ Simple sprite and image display, including 8 - bit transparency and smoothing(only PNG format supported, for now)
+ Support for arbitrarily sized images
+ Audio playback with looping support
+ Easy scale and orientation manipulation of displayed graphics
+ Output - independent canvas size abstraction
+ Full - screen(game) mode support

\n

\section About
\author Georgios Papaioannou
\version 1.0
\date 30 Sep 2020
\copyright Athens University of Economics and Business

\subsection sub_licensing Disclaimer and Licensing

Simple Game Graphics is free software; you can redistribute it and/or modify it under the terms of the MIT License.

*The MIT License(MIT)*

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files(the "Software"), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions :
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\subsection sub_dependencies Dependencies and Third - Party Libraries

Simple Game Graphics uses the following libraries : OpenGL Mathematics(GLM) template library, Simple DirectMedia Layer(SDL),
FreeType and SDL_mixer 2.0..All necessary libraries are included into the source tree along with the appropriate license
notifications, where available.

*/

/** \page page_building_sgg Building SGG

The first step is to download the library from the online GitHub repository. If you have `git` installed you can open your command line and execute the following command.

`git clone https://github.com/cgaueb/sgg.git`

or simply download the .ZIP file and extract it somewhere on your PC.

The library currently comes with build scripts for Windows and Linux. It is written in standard C++ and depends on well supported, cross-platform libraries. Building for different operating systems and compilers should be straightforward. 

After cloning or unzipping, the directory structure should be as follows:

`3rdparty/` Dependencies and assets\n
`doc/` Documentation\n
`demo/` Source for a sample application that depends on SGG\n
`sgg/` Source for the SGG library itself. **!No need to modify**\n
`build_demo_x64.bat` Windows demo build script\n
`build_demo_x64.sh` Linux demo build script\n
`build_demo_macOS.sh` Mac OS demo build script\n
`build_sgg_x64.bat` Windows SGG build script\n
`build_sgg_x64.sh` Linux SGG build script\n
`build_sgg_macOS.sh` Mac OS SGG build script\n

\section building_sgg_windows_msvc Windows (Visual Studio 2019 - MSVC)

1) First, make sure you have **Visual Studio 2019** installed on your system.

2) To build the library simply **double click on the `build_sgg_x64.bat`**. This script builds both a Release (`sgg.lib`) and a Debug (`sggd.lib`) version of the library. The resulting libraries are stored in the `lib` folder. 

These are the libraries we need to link to our program in order to use the functions of SGG. The additional dependencies required for the library are conveniently included in the `3rdParty` folder. 

3) To test the library, you can double click on the `build_demo_x64.bat` to build the demo application found in `demo` and uses the SGG library. After a successful build, the executable can be found in `bin`. 

\section building_sgg_linux_gcc Linux (GCC)

1) First, we need to make sure that we have the GCC compiler setup properly. The best option is to use our distribution's package manager. The following steps use the `apt` command line tool that is commonly found in Ubuntu/Debian Linux distributions.

We need to execute the following commands as **root** or a user with **sudo** privileges. 

`sudo apt-get update`

`sudo apt-get install build-essential`

The first command updates the system's package information.

The second command installs the essential tools for building from C++ source code. (gcc, libc e.t.c.)

2) Next, we will need to install development versions of the 3rd party libraries that SGG depends on.

This is again very easy using our system's package manager.

`sudo apt-get install libsdl2-dev libsdl2-mixer-dev libglew-dev libfreetype6-dev`

3) After properly installing gcc and the 3rd party dependencies, the library can be built using the provided script. In your terminal, change directory to within the downloaded folder and execute the command:

`./build_sgg_x64.sh`

This script builds both a Release (`libsgg.a`) and a Debug (`libsggd.a`) version of the library. The resulting libraries are stored in the `lib` folder. 

These are the libraries we need to link to our program in order to use the functions of SGG. 

4) To test the library, you can execute `./build_demo_x64.sh` to build the demo application found in `demo` and uses the SGG library. After a successful build, the executable can be found in `bin`. 

\section building_sgg_cmake CMake (with Vcpkg)

1) Follow the instructions at <a href=" https://github.com/microsoft/vcpkg"> https://github.com/microsoft/vcpkg</a> to install the `vcpkg` package manager at your desired location.

2) Use Vcpkg to install the required dependencies with the following commands.

```
vcpkg install glew:x64-windows-static
vcpkg install sdl2:x64-windows-static
vcpkg install sdl2-mixer:x64-windows-static
vcpkg install freetype:x64-windows-static
vcpkg install glm:x64-windows-static
```

3) To continue, we have two options. In the following commands, replace the `/path/to/vcpkg/directory` placeholder with the proper path to your Vcpkg installation directory.

### [Option 1 (Recommended)] Configuring project with vcpkg toolchain and registry support

This will automatically register the library's build tree to cmake. It will also auto find it's dependencies through vcpkg's toolchain without requiring the dependent project to use the vcpkg toolchain itself. This is the most convenient option when building for personal usage. 

```
cmake -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON \
                -DCMAKE_TOOLCHAIN_FILE=/path/to/vcpkg/directory/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=x64-windows-static
```

### [Option 2] Configuring project with vcpkg toolchain and no registry support

This will force dependent projects to have a global or local installation of the package available. The installed folder is supposed to be packaged and distributed to different computers so it can't reuse the vcpkg config files as they may not be available. The dependent projects will have to either supply the vcpkg toolchain themselves or use any other way so as to make the library's dependencies discoverable. For example one may also use the conan package manager, cmake-supplied Find modules, system installed config files or local Find modules.

```
cmake -B build -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_TOOLCHAIN_FILE=/path/to/vcpkg/directory/scripts/buildsystems/vcpkg.cmake \
               -DVCPKG_TARGET_TRIPLET=x64-windows-static
```

4) To build, we execute the command 

`cmake --build build`

At this point, if configured using Option 1, the library will be available for consumption from other cmake projects.

5) 
For global installation use:

`cmake --build build --target install`

For installation to a destination folder, re-configure with CMake to set the `CMAKE_INSTALL_PREFIX`:

```
cmake -B build -DCMAKE_INSTALL_PREFIX=dest
cmake --build build --target install
```

## Usage

Dependent projects can use `find_package(sgg REQUIRED)` in their CMakeLists.txt and then link to the `sgg::sgg` target. 

*/

/** \page page_building_with_sgg Building your Project with SGG

\section using_sgg_windows Windows (Visual Studio 2019)

You can choose to develop your project in Visual Studio or through the command line. Keep in mind that the library is only provided for **64 bit** systems. All the steps below assume the `x64` Visual Studio configuration.

\subsection using_sgg_windows_vs Setting up a Visual Studio project that uses SGG

There are 3 important things that a project requires in order to use SGG.

- At **compile time**, it needs to know where to find the `graphics.h` and `scancodes.h` which contain the API of the SGG library.

- At **compile time**, it needs to know where it can find the `sgg.lib` or `sggd.lib` that contain the implementation of the API.

- At **runtime** it needs to have the dynamically linked library dependencies (.dll) in the same directory as the executable file in order to be able to load them successfully.

Let's create a Visual Studio project with a sample project that uses SGG. Let's call it `Demo`. 

1) We create an Empty Project. We save the solution in whichever place on our computer we want. Visual Studio initially uses the same name for both the Solution and the Project. By default, Visual Studio creates a `Demo` directory for our solution and within it, a `Demo` directory for our Project. 

2) We add to the `Demo` project a source file that will hold the main function. Let's call it `Main.cpp`. Copy the code provided in \ref page_simple_app to `Main.cpp`.

3) It's time to properly setup the dependencies. 

3.1) In our **Solution Directory** (`Demo`), create two folders, `include` and `lib`. 

`include` will hold the header files for SGG and `lib` the sgg library.

3.2) From the `sgg` folder in the downloaded files, copy `graphics.h` and `scancodes.h` into the `include` folder of our Solution.

3.3) Similarly, copy all the files from the `lib` folder that was created when we built the SGG library (\ref page_building_sgg) to the `lib` folder in our Solution directory.

3.4) Right click on the project and select properties. First, we set the `Additional Include Directories`, under `C/C++ -> General`, to have the `include` path from the solution. This can be done by setting \c \$`(SolutionDir)\include`.

3.5) Then, for the libraries, under `Linker -> General`, we set the `Additional Library Directories` to have the `lib` path from our solution. This can be done by setting \c \$`(SolutionDir)\lib`.

3.6) In the `Linker -> Input`, under `Additional Dependencies` we must include the name of the SGG library. For the `Release` configuration we should use `sgg.lib` and for the `Debug` configuration we should use `sggd.lib`. The input should look something like this `sgg.lib;kernel32.lib;user32.lib;...`

If we try to run our application it will compile successfully but before it starts, it will show an error about failing to find certain `.dll` files. These are the runtime dependencies we described above.

3.7) After building, our solution directory contains a folder named `x64`. Inside, there are folders for `Debug` and `Release` builds of our project depending on which one we chose. Our application executable is in here and for it to be able to find the required `.dll`s we need to copy them in here. This needs to be done both for the `Release` and the `Debug` folder. Copy **all the contents** (.dll files) from the `3rdparty\bin` folder to both the `x64\Release` and the `x64\Debug` folder. Our application will now be able to use them.

3.8) By default when running our program from within Visual Studio, the executable looks for files inside the Project's directory. This can be validated if we go to the properties of our Project and look under `Debugging`. The working directory is set to \c \$`(ProjectDir)`. This practically means that when our executable tries to open external files (music, pictures, fonts e.t.c.), it will always look relative to this directory. Our sample code expects to find several files within an `assets` folder. Therefore, our last action is to copy the `assets` folder into the Project's folder.

After all the above steps, we have correctly configured our Visual Studio Project to use the SGG library. We are ready to develop our game within Visual Studio!

\subsection using_sgg_windows_cmd Compiling an application that uses SGG from the command line

First we need to set up the environment for using the MSVC compiler. In a command console, execute the script located in:

`C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`

Execute `cl /?` to make sure your environment is set up.

After that, we are ready to use the MSVC compiler.

First, we `cd` to the directory of the SGG library. There, we create a directory named `bin` that will hold our executable:

`mkdir bin`

Then, we can build the **Release** version of the demo application with

`cl /EHsc /O2 /MD /Isgg demo/demo.cpp /link /LIBPATH:lib /SUBSYSTEM:CONSOLE /MACHINE:X64 sgg.lib /OUT:bin/demo.exe`

and the **Debug** version of the demo application with

`cl /EHsc /Zi /MDd /DEBUG /D"_DEBUG" /Isgg demo/demo.cpp /link /LIBPATH:lib /SUBSYSTEM:CONSOLE /MACHINE:X64 sggd.lib /OUT:bin/demod.exe`

The demo requires a few assets(images, sounds, fonts e.t.c.) at runtime which can be founnd in `3rdparty`. Manually copy the `assets` folder to the `bin` directory so that our executable can find them when it runs. 

We also require the dynamically linked libraries for our 3rd party libraries. These can be found in `3rdparty\bin`. Copy **all the contents**(.dll files) of the `3rdparty\bin` folder to the `bin` directory we previously created. Our application will now be able to use them.

Finally to run the program, change directory to `bin` with:

`cd bin`

and execute

`demo.exe`

or

`demod.exe`

There is also a script named `build_demo_x64.bat` that automatically executes the above steps for convenience. For your project, feel free to use or customize this build script according to your needs.

\section using_sgg_linux Linux (GCC)

The following commands should be executed in the top directory of the downloaded files.

First, create a `bin` directory that will hold our executable:

`mkdir bin`

The command to compile the `demo` sample for `Release` should look like this:

`g++ -O2 -Llib -Isgg demo/demo.cpp -lsgg -lGL -lGLEW -lSDL2 -lSDL2_mixer -lfreetype -o bin/demo`

and for `Debug`

`g++ -Og -g -Llib -Isgg demo/demo.cpp -lsggd -lGL -lGLEW -lSDL2 -lSDL2_mixer -lfreetype -o bin/demod`

The demo requires a few assets(images, sounds, fonts e.t.c.) at runtime which can be found in `3rdparty`. Manually copy the `assets` folder to the `bin` directory so that our executable can find it when it runs.

Finally to run the program, change directory to `bin` with:

`cd bin`

and execute

`./demo`

or

`./demod`

There is also a script named `build_demo_x64.sh` that automatically executes the above steps for convenience. For your project, feel free to use or customize this build script according to your needs.

If you plan on using this build script in your project, and you start having to
compile multiple source files, it is **strongly recommended** to consider using a
Makefile or CMake (Makefiles are a lot simpler). See: \ref page_example_makefile .

The library is very simple to use. The first thing to do is to include the graphics.h header file into your
code (see supplementary example code):
\code{.cpp}
#include "graphics.h"
\endcode

All necessary functions are declared in the "graphics" namespace, so you need to either use the fully qualified function
names or add:
\code{.cpp}
using namespace graphics
\endcode

\page page_example_makefile Example Makefile

Makefiles are superior to build scripts because:
1. they speed up compilation (especially for C/C++), and
2. they are simple to configure

## The idea

If set up properly, Makefiles can detect dependencies between source files.
This is perfect for C/C++ projects, since usually we don't need to recompile
each source file after a small change to one of them. We can simply compile
each `*.cpp` file into it's respective object file (`*.o`) and then link them
all together.

An extensive but *very* useful guide on Makefiles can be found <a href="https://makefiletutorial.com">here</a>.

## Example
Suppose we have build sgg (see: \ref page_building_sgg) and played around with
our project a bit. Our directory structure looks like this:

	my_project/
	├── include/
	│   └── sgg/
	│       ├── graphics.h
	│       └── scancodes.h
	├── lib/
	│   ├── libsgg.a
	│   └── libsggd.a
	├── level.cpp
	├── level.h
	├── main.cpp
	├── player.cpp
	├── player.h
	├── timer.cpp
	└── timer.h

Now we can add a `Makefile` in this directory to automate compilation.

\code
# simple game graphics library
SGGINC = ./include
SGGLIB = ./lib

# includes and libs
INCS = -I$(SGGINC)
LIBS = -lsgg -lGL -lGLEW -lSDL2 -lSDL2_mixer -lfreetype
LIBS_D = -lsggd -lGL -lGLEW -lSDL2 -lSDL2_mixer -lfreetype

# separate object files for debug version (they compile with different flags)
SRC = main.cpp level.cpp player.cpp
OBJ = $(SRC:.cpp=.o)
OBJ_D = $(SRC:.cpp=.debug.o)

CXX = g++
CXXFLAGS = -O2 $(INCS)
CXXFLAGS_D = -Og -g $(INCS)
LDFLAGS = -L$(SGGLIB) $(LIBS)
LDFLAGS_D = -L$(SGGLIB) $(LIBS_D)
TARGET = project
TARGET_D = project_d

# only build the debug version by default (same as in Visual Studio)
all: debug

debug: options_d $(TARGET_D)

options_d:
	@echo "[DEBUG] Project build options:"
	@echo "CXXFLAGS = $(CXXFLAGS_D)"
	@echo "LDFLAGS = $(LDFLAGS_D)"
	@echo "CXX = $(CXX)"

$(TARGET_D): $(OBJ_D)
	$(CXX) $(CXXFLAGS_D) $(OBJ_D) -o $@ $(LDFLAGS_D)

%.debug.o: %.cpp %.h
	$(CXX) $(CXXFLAGS_D) -c $< -o $@ $(LDFLAGS_D)

main.debug.o: main.cpp
	$(CXX) $(CXXFLAGS_D) -c $< -o $@ $(LDFLAGS_D)

release: options $(TARGET)

options:
	@echo "[RELEASE] Project build options:"
	@echo "CXXFLAGS = $(CXXFLAGS)"
	@echo "LDFLAGS = $(LDFLAGS)"
	@echo "CXX = $(CXX)"

$(TARGET): $(OBJ)
	$(CXX) $(CXXFLAGS) $(OBJ) -o $@ $(LDFLAGS)

%.o: %.cpp %.h
	$(CXX) $(CXXFLAGS) -c $< -o $@ $(LDFLAGS)

main.o: main.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@ $(LDFLAGS)

both: options_d options debug release

clean:
	rm -f $(TARGET) $(TARGET_D) $(OBJ) $(OBJ_D)

.PHONY: all debug options_d release options both clean
\endcode

## Usage


	$ make release   # builds the release version, the executable is called 'project'
	$ make debug     # builds the debug version, the executable is called 'project_d'
	$ make           # also builds the debug version, since it is the default target
	$ make both      # builds both versions
	$ make clean     # clean project directory of object files and targets

\page page_simple_app A Simple Example

A minimal main application should look like this:
\code{.cpp}
#include "graphics.h"

// The custom callback function that the library calls 
// to check for and set the current application state.
void update(float ms)
{
	graphics::MouseState mouse;
	graphics::getMouseState(mouse);
	if (mouse.button_left_released)
	{
		graphics::playSound("assets\\door2.wav", 1.0f, false);
	}
}

// The window content drawing function.
void draw()
{
	graphics::Brush br;

	graphics::setOrientation(45);
	
	br.texture = "assets\\boy2.png";
	br.outline_opacity = 0.0f;

	graphics::drawRect(500, 250, 200, 200, br);
		
	br.fill_color[0] = 0.5f;
	br.fill_color[1] = 0.0f;
	br.fill_color[2] = 0.0f;

	graphics::resetPose();
	drawText(300, 440, 70, "Hello World!", br);
}

int main()
{
	graphics::createWindow(1200, 600, "Hello World");

	graphics::setDrawFunction(draw);
	graphics::setUpdateFunction(update);

	graphics::setCanvasSize(1000, 500);
	graphics::setCanvasScaleMode(graphics::CANVAS_SCALE_FIT);
	
	graphics::Brush br;
	br.fill_color[0] = 0.5f;
	br.fill_color[1] = 0.7f;
	br.fill_color[2] = 0.9f;
	graphics::setWindowBackground(br);

	graphics::setFont("assets\\orange juice 2.0.ttf");
	
	graphics::startMessageLoop();

	return 0;
}
\endcode

And the output of the program should look like this:
\image html helloworld.jpg

\subsection sub_window_setup Window Setup

In the above code, the first line of the main function initializes the library, creates,
and displays a window of specific dimensions (here 1200 X 600 pixels).
The window also has the title "Hello World" displayed on its window (title) bar.

\code{.cpp}
graphics::createWindow(1200, 600, "Hello World");
\endcode

Next, we provide two important *callback* functions for the library to invoke when 
the event processing loop starts (see \ref startMesageLoop). The first one is responsible
for determining the contents of the canvas and typically contains a series of draw functions
or calls to other custom class members and functions, where the SGG drawing functions are
invoked from. The other callback, the update function, is frequently called by the 
framework to give the user the oportunity to respond to user interface events and 
change the internal state of the application. This is typically the place where
user interaction is handled and code for gameplay reactions and global state changes is called.

\code{.cpp}
graphics::setDrawFunction(draw);
graphics::setUpdateFunction(update);
\endcode

The following function calls determine the virtual draw canvas size and dimensions and set the
behavior of the framework when resizing the window. SGG disassociates the screen size of the 
application from the internal units that are used for describing the displayed content, so that
applications can run in different resolutions and window sizes and still display the content
properly. For this, a user-defined display canvas is provided, whose aspect ratio and dimensions
determine where drawn shapes are displayed. All coordinates and shape sizes provided in the 
application respect the canvas units and extents. In this particular example, we set the 
canvas to an area of 1000 X 500 custom units, whereas the application window size has been 
set to 1200 X 600 pixels. We can shrink or expand the window and the content will be adjusted
automatically. The way the content is adjusted is controlled by the canvas scale mode. This is
set by the \ref setCanvasScaleMode function, which takes as an argument one of the predetermined
behaviors for content scaling.

\code{.cpp}
graphics::setCanvasSize(1000, 500);
graphics::setCanvasScaleMode(graphics::CANVAS_SCALE_FIT);
\endcode

 Here we instruct the framework to fit the canvas to the window 
display area, respecting the aspect ratio of the former. The residual space not occupied by the 
scaled canvas is left blank.

\image html scalefit.jpg

\subsection sub_brushes Brushes

A core part of the library is the \ref{} Brush structure, which acts as a style record for all things drawn.
It is used throughout the draw calls to specify the fill color(s), transparency, gradient, texture pattern, outline
and other properties of the drawn elements, including text attributes. Not all Brush fields are required at all the time
but the structure provides a unified placeholder for all possible attributes. Therefore, we may set what specific 
attributes we interested in and leave the rest to their default values. In the following code snippet from the main,
we declare a Brush variable and only set the fill color attributes (red, green and blue). Then, we pass the brush to
a function that defines the color of the canvas background. In this function, all other Brush fields are ignored as
irrelevant. 

\code{.cpp}
graphics::Brush br;
br.fill_color[0] = 0.5f;
br.fill_color[1] = 0.7f;
br.fill_color[2] = 0.9f;
graphics::setWindowBackground(br);
\endcode

In the draw() function of our example, a similar brush is defined to provide attributes for drawing a rectangle used
as a sprite (displayable bitmap asset):

\code{.cpp}
br.texture = "assets\\boy2.png";
br.outline_opacity = 0.0f;

graphics::drawRect(500, 250, 200, 200, br);
\endcode

Here the brush default color is not touched (1,1,1: white), but the image used for covering the rectange is required (texture field).
We also set the brush outline opacity to zero so that no outline is drawn for our rectangle, eliminating the border of the sprite. 

\subsection sub_fonts Fonts

SGG can display text, respecting brush options, using one or more TrueType fonts. You can download and reference any font set from the thousand 
freely available ones. To draw text, you must provide at least one valid font name and set it as the current font:

\code{.cpp}
graphics::setFont("assets\\orange juice 2.0.ttf");
\endcode

The above function instructs the library to look for the specific font file and load it, if not already initialized and at the same time
enable it for text drawing. Therefore, if your application used multiple fonts, you can switch between them using the same function. The 
fonts are only loaded once, so performance is not affected by the switch.

*/
